<?php
/**
 * UCB Open Berkeley customizations
 */

//TODO: Revisit this as an OB Feature (or Panopoly/feature override)

/**
 * Implementation of hook_form_alter
 *
 */
function ucb_openberkeley_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case "views_form_control_users_page_1":
      if (!isset($form['add_roles']) || (!isset($form['remove_roles']))) {
        break;
      }
      $admin_rid = variable_get('user_admin_role');
      $roles = user_roles();
      $admin_rolename = NULL;
      if ((!is_array($roles)) || (!array_key_exists($admin_rid, $roles))) {
        drupal_set_message("Roles may be misconfigured. Possible security implications. Ask your administrator to check on this.", "warning");
      }
      else {
       $admin_rolename = $roles[$admin_rid];
      }

      while (list($k, $v)  = each($form['add_roles']['#options'])) {
        if ($v == $admin_rolename) {
          unset($form['add_roles']['#options'][$k]);
        }
      }
      while (list($k, $v)  = each($form['remove_roles']['#options'])) {
        if ($v == $admin_rolename) {
          unset($form['remove_roles']['#options'][$k]);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_module_implements_alter()
 * Change order of hook execution without needing to alter module weight
 * See http://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_module_implements_alter/7
 */

function ucb_openberkeley_module_implements_alter(&$implementations, $hook) {
  //Any change here requires caches to be cleared.
  if ($hook == 'wysiwyg_editor_settings_alter') {
    $first = $implementations['panopoly_wysiwyg'];
    unset($implementations['panopoly_wysiwyg']);

    $second = $implementations['ucb_openberkeley'];
    unset($implementations['ucb_openberkeley']);

    //Call wysiwyg_editor_settings_alter on panopoly_wysiwyg then ucb_openberkeley
    $implementations['panopoly_wysiwyg'] = $first;
    $implementations['ucb_openberkeley'] = $second;
  }
}

/**
 * Implementation of hook_wysiwyg_editor_settings_alter()
 * See wysiwyg.api.php (wysiwyg module)
 */


//See panopoly_wysiwyg.module for other defaults
function ucb_openberkeley_wysiwyg_editor_settings_alter(&$settings, $context) {
  //See hook_module_implements_alter() and clear caches if necessary

  // Add Panopoly Wysiwyg settings to Editor Profile
  if ($context['profile']->format == 'editor') {

    switch ($context['editor']['name']) {
      case 'tinymce':

        // Define the skin to use
        $settings['skin'] = 'cirkuit';

        // Define the spellchecking settings
        $settings['spellchecker_languages'] = '+English=en';

        $enabled_buttons = preg_split('/,/', $settings['theme_advanced_buttons1']);

        //Defaults are same as panopoly_wysiwyg except outdent before indent
        $default_buttons = array('bold', 'italic', 'strikethrough', '|', 'bullist', 'numlist', 'blockquote', '|', 'justifyleft', 'justifycenter', 'justifyright', '|', 'linkit', 'unlink', 'break', '|', 'fullscreen', 'spellchecker', 'media', 'captionfilter', 'pdw_toggle', 'PAGEBREAK', 'formatselect', '|', 'underline', '|', 'justifyfull', '|', 'forecolor', '|', 'pastetext', 'pasteword', 'removeformat', '|', 'charmap', '|', 'outdent', 'indent', '|', 'undo', 'redo');
        foreach ($default_buttons as $button) {
          if (in_array($button, $enabled_buttons)) {
            unset($enabled_buttons[array_search($button, $enabled_buttons)]);
          }
          elseif ($button != '|' && $button != 'PAGEBREAK') {
            unset($default_buttons[array_search($button, $default_buttons)]);
          }
        }

        // Define the final button row settings
        $default_buttons_list = preg_split('/,PAGEBREAK,/', implode(',', $default_buttons));
        $settings['theme_advanced_buttons1'] = $default_buttons_list[0];
        $settings['theme_advanced_buttons2'] = $default_buttons_list[1];
        $settings['theme_advanced_buttons3'] = (count($enabled_buttons) > 0) ? implode(',', $enabled_buttons) : NULL;

        // Define PDW Plugin Settings
        $settings['pdw_toggle_on'] = '1';
        $settings['pdw_toggle_toolbars'] = (count($enabled_buttons) > 0) ? '2,3' : '2';

        // Enable the inlinepopups and modal settings
        $settings['plugins'] .= ',inlinepopups';
        $settings['dialog_type'] = 'modal';

        // Allow extra elements for Media module
        // See - http://drupal.org/node/1835826
        if (empty($settings['extended_valid_elements'])) {
          $settings['extended_valid_elements'] = 'img[!src|title|alt|style|width|height|class|hspace|vspace|view_mode|format|fid]';
        }
        else {
          $settings['extended_valid_elements'] = array_merge(explode(',', $settings['extended_valid_elements']), array('img[!src|title|alt|style|width|height|class|hspace|vspace|view_mode|format|fid]'));

          // When adding new elements to $settings['extended_valid_elements'], make sure
          // that we're merging, and not overwriting.
          $settings_array = array();
          foreach($settings['extended_valid_elements'] as $tag) {
            list($tag, $allowed_attributes) = explode('[', $tag);
            $allowed_attributes = explode('|', trim($allowed_attributes, ']'));
            foreach($allowed_attributes as $key => $attribute) {
              $settings_array[$tag][$attribute] = $attribute;
            }
          }
          $valid_elements = array();
          foreach ($settings_array as $tag => $allowed_attributes) {
            $attributes = in_array('*', $allowed_attributes) ? '*' : implode('|', $allowed_attributes);
            $valid_elements[] = $tag . '[' . $attributes . ']';
          }
          $settings['extended_valid_elements'] = implode(',', $valid_elements);
        }
        break;
      case 'markitup':

        // Load the appropriate CSS and JS
        drupal_add_css($context['editor']['library path'] . '/markitup/sets/html/style.css');
        drupal_add_js($context['editor']['library path'] . '/markitup/sets/html/set.js');

        // Defin the new header buttons
        $header_buttons = array(
          'header-begin' => array(
            'className' => 'markItUpSeparator',
          ),
          'h1' => array(
            'name' => t('Heading 1'),
            'className' => 'markitup-h1',
            'key' => '1',
            'openWith' => '<h1(!( class="[![Class]!]")!)>',
            'closeWith' => '</h1>',
            'placeHolder' => 'Your title here...',
          ),
          'h2' => array(
            'name' => t('Heading 2'),
            'className' => 'markitup-h2',
            'key' => '2',
            'openWith' => '<h2(!( class="[![Class]!]")!)>',
            'closeWith' => '</h2>',
            'placeHolder' => 'Your title here...',
          ),
          'h3' => array(
            'name' => t('Heading 3'),
            'className' => 'markitup-h3',
            'key' => '3',
            'openWith' => '<h3(!( class="[![Class]!]")!)>',
            'closeWith' => '</h3>',
            'placeHolder' => 'Your title here...',
          ),
          'h4' => array(
            'name' => t('Heading 4'),
            'className' => 'markitup-h4',
            'key' => '4',
            'openWith' => '<h4(!( class="[![Class]!]")!)>',
            'closeWith' => '</h4>',
            'placeHolder' => 'Your title here...',
          ),
          'paragraph' => array(
            'name' => t('Paragraph'),
            'className' => 'markitup-paragraph',
            'key' => 'p',
            'openWith' => '<p(!( class="[![Class]!]")!)>',
            'closeWith' => '</p>',
          ),
          'header-end' => array(
            'className' => 'markItUpSeparator',
          ),
          );

        // Define the list styles
        $list_styles = array(
          'list-bullet' => array(
            'name' => t('Unordered List'),
            'className' => 'markitup-list-bullet',
            'openWith' => "<ul>\n",
            'closeWith' => '</ul>',
          ),
          'list-numeric' => array(
            'name' => t('Ordered List'),
            'className' => 'markitup-list-numeric',
            'openWith' => "<ol>\n",
            'closeWith' => '</ol>',
          ),
        );

        // Add the header buttons to the end
        foreach ($header_buttons as $tag => $details) {
          $settings['markupSet'][$tag] = $details;
          $context['profile']->settings['buttons']['html'][$tag] = 1;
        }

        // Add the list styles to the end
        foreach ($list_styles as $tag => $details) {
          $settings['markupSet'][$tag] = $details;
          $context['profile']->settings['buttons']['html'][$tag] = 1;
        }
        break;
    }
  }

  if (strpos($context['profile']->format, 'panopoly_') === 0) {

    // Note: To override Panopoly Wysiwyg default order, we need to recreate original $enabled_buttons since panopoly_wysiwyg.module has already processed $settings['theme_advanced_buttons1']; pdw_toggle and formatselect become pdw_toggleformatselect so need workaround to include (see below)

    if (isset($settings['theme_advanced_buttons1']) && isset($settings['theme_advanced_buttons2']) && isset($settings['theme_advanced_buttons3'])) {

      //Need to concatenate with commas to avoid parsing error when explode returns array
      $enabled_buttons = explode(',', ($settings['theme_advanced_buttons1'] . ',' . $settings['theme_advanced_buttons2'] . ',' . $settings['theme_advanced_buttons3']));

      //First row buttons
      //Need to include 'strikethrough' and 'captionfilter' because panopoly_wysiwyg.module lists in its
      //default buttons. Will be unset if not enabled.
      $first_row_buttons = array('bold', 'italic', 'strikethrough', '|', 'bullist', 'numlist', 'blockquote', '|', 'justifyleft', 'justifycenter','justifyright','|','link', 'linkit', 'unlink', 'break', '|', 'fullscreen', 'spellchecker', 'media', 'captionfilter', 'pdw_toggle');

      //Remove button from toolbar if not enabled in wysiwyg profile config and not pdw_toggle (Kitchen Sink)
      foreach($first_row_buttons as $button) {
        if (!in_array($button, $enabled_buttons) && $button != 'pdw_toggle') {
          unset($first_row_buttons[array_search($button, $first_row_buttons)]);
        }
      }
      $settings['theme_advanced_buttons1'] = implode(",", $first_row_buttons);

      //Desired second row buttons. Include all defaults from panopoly_wysiwyg.module.
      $second_row_buttons = array('formatselect', '|', 'underline', '|', 'justifyfull', '|', 'forecolor', '|', 'pastetext', 'pasteword', 'removeformat', '|', 'charmap', '|', 'outdent', 'indent', '|', 'undo', 'redo');

      //Remove button from toolbar if not enabled in wysiwyg profile config and not formatselect (Block Format)
      foreach($second_row_buttons as $button) {
        if (!in_array($button, $enabled_buttons) && $button != 'formatselect') {
          unset($second_row_buttons[array_search($button, $second_row_buttons)]);
        }
      }
      $settings['theme_advanced_buttons2'] = implode(",", $second_row_buttons);
    }
  }
}
